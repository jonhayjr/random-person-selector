{"version":3,"sources":["Header/Header.js","Button/Button.js","UserInput/UserInput.js","Main/Main.js","Footer/Footer.js","App/App.js","reportWebVitals.js","index.js"],"names":["Header","className","Button","props","cName","class","text","UserInput","onChange","inputValue","onSubmit","useState","validationError","setValidationError","e","preventDefault","target","value","Main","randomPerson","Footer","App","setInputValue","setRandomPerson","usedPeople","setUsedPeople","arr","usedPersons","length","randomNumber","Math","floor","random","indexOf","push","randomPersonGenerator","replace","split","person","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0VAUeA,EARA,WACX,OACI,wBAAQC,UAAU,SAAlB,SACI,oBAAIA,UAAU,kBAAd,uCCMGC,G,kBATA,SAACC,GACZ,IAAMC,EAAK,iBAAaD,EAAME,OAC9B,OACI,8BACI,wBAAQJ,UAAWG,EAAnB,SAA2BD,EAAMG,WCyC9BC,EAxCG,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,SAEtC,EAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAuBA,OACI,uBAAMZ,UAAU,OAAOS,SAlBN,SAACI,GAElBA,EAAEC,iBAGGN,GAKDI,GAAmB,GAEnBH,EAASD,IALTI,GAAmB,IAWvB,UACI,uBAAOZ,UAAU,cAAjB,iGAEAW,EAEA,mBAAGX,UAAU,mBAAb,yCACE,GAEF,0BAAUA,UAAU,gBAAgBO,SA9BvB,SAACM,GAClBN,EAASM,EAAEE,OAAOC,QA6B8CA,MAAOR,IACnE,cAAC,EAAD,CAAQJ,MAAM,kBAAkBC,KAAK,0BCvBlCY,EAdF,SAAC,GAAoD,IAAnDV,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,SAAUS,EAAkB,EAAlBA,aAC3C,OACI,uBAAMlB,UAAU,OAAhB,UACI,cAAC,EAAD,CAAWO,SAAUA,EAAUC,WAAYA,EAAYC,SAAUA,IAEjES,EAEA,oBAAGlB,UAAU,cAAb,UAA2B,sBAAMA,UAAU,OAAhB,SAAwBkB,IAAnD,yBACE,OCHCC,G,MARA,WACX,OACI,wBAAQnB,UAAU,SAAlB,SACG,mBAAGA,UAAU,oBAAb,kCCsEIoB,EAjEH,WACV,MAAoCV,mBAAS,IAA7C,mBAAOF,EAAP,KAAmBa,EAAnB,KACA,EAAwCX,mBAAS,IAAjD,mBAAOQ,EAAP,KAAqBI,EAArB,KACA,EAAoCZ,mBAAS,IAA7C,mBAAOa,EAAP,KAAmBC,EAAnB,KAqDA,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAMjB,SAtDO,SAACM,GAEhBQ,EAAcR,IAoDcL,WAAYA,EAAYC,SAlBrC,SAACI,GAEf,IAGD,EApC4B,SAACY,GAE3B,IAAIC,EAAcH,EAGdG,EAAYC,SAAWF,EAAIE,SAC3BD,EAAc,IAUlB,IANA,IAAIE,EAAeC,KAAKC,MAAMD,KAAKE,SAAWN,EAAIE,QAG9CT,EAAeO,EAAIG,GAGhBF,EAAYM,QAAQd,IAAiB,GAExCA,EAAeO,EADfG,EAAeC,KAAKC,MAAMD,KAAKE,SAAWN,EAAIE,SAOlD,OAFAD,EAAYO,KAAKf,GAEV,CAACA,EAAcQ,GAYMQ,CAHjBrB,EAAEsB,QAAQ,KAAM,IAAIC,MAAM,OAGvC,mBAAOC,EAAP,KAAeX,EAAf,KAGAJ,EAAgBe,GAGhBb,EAAcE,IAO0DR,aAAcA,IACpF,cAAC,EAAD,QC1DSoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.17c576d5.chunk.js","sourcesContent":["import './Header.css';\n\nconst Header = () => {\n    return (\n        <header className='header'>\n            <h1 className='header__heading'>Random Person Selector</h1>\n        </header>\n    )\n}\n\nexport default Header\n","import './Button.css'\n\nconst Button = (props) => {\n    const cName = `button ${props.class}`;\n    return (\n        <div>\n            <button className={cName}>{props.text}</button>\n        </div>\n    )\n}\n\nexport default Button\n"," import {useState} from 'react';\n/*Import CSS*/\nimport './UserInput.css';\n\n/*Import Components*/\nimport Button from '../Button/Button';\n\nconst UserInput = ({onChange, inputValue, onSubmit}) => {\n\n    const [validationError, setValidationError] = useState(false);\n\n    const handleChange = (e) => {\n        onChange(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        /*Prevent default form behavior*/\n        e.preventDefault();\n\n        /*If input doesn't contain value, throw validation error.  If it does contain value, run handle submit*/\n        if (!inputValue) {\n            /*Set Validation Error to true*/\n            setValidationError(true);\n        } else {\n            /*Set Validation Error to False*/\n            setValidationError(false);\n            /*Trigger onSubmit function*/\n            onSubmit(inputValue);\n        }\n\n    }\n\n    return (\n        <form className='form' onSubmit={handleSubmit}>\n            <label className='form__label'>Please input a list of people below and click the button to select a random person.</label>\n            {\n            validationError\n            ?\n            <p className='validation-error'>This field cannot be blank!</p>\n            : ''\n            }\n            <textarea className='form__textbox' onChange={handleChange} value={inputValue}></textarea>\n            <Button class='btn btn-primary' text='Get Random Person'/>\n        </form>\n    )\n}\n\nexport default UserInput\n","import './Main.css';\n\n/*Import Components*/\nimport UserInput from '../UserInput/UserInput';\n\nconst Main = ({onChange, inputValue, onSubmit, randomPerson}) => {\n    return (\n        <main className='main'>\n            <UserInput onChange={onChange} inputValue={inputValue} onSubmit={onSubmit}/>\n            {\n            randomPerson\n            ?\n            <p className='random-user'><span className='bold'>{randomPerson}</span> has been selected.</p>\n            : ''\n            }\n        </main>\n    )\n}\n\nexport default Main\n","import './Footer.css';\n\nconst Footer = () => {\n    return (\n        <footer className='footer'>\n           <p className='footer__paragraph'>&#169;2021 Jon Hay</p>\n        </footer>\n    )\n}\n\nexport default Footer\n","import {useState} from 'react';\n\n/*Import CSS*/\nimport './App.css';\n\n/*Import Components*/\nimport Header from '../Header/Header';\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\n\nconst App = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [randomPerson, setRandomPerson] = useState('');\n  const [usedPeople, setUsedPeople] = useState([]);\n\n  const onChange = (e) => {\n    /*Add input value to state*/\n    setInputValue(e);\n  }\n\n  const randomPersonGenerator = (arr) => {\n      /*Get usedPeople array value*/\n      let usedPersons = usedPeople;\n\n      /*If usedPerson array contains all names, reset it.*/\n      if (usedPersons.length === arr.length) {\n          usedPersons = [];\n      }\n      \n      /*Get random number based on array of names length*/\n      let randomNumber = Math.floor(Math.random() * arr.length);\n\n      /*Get random person using random number as index*/\n      let randomPerson = arr[randomNumber];\n      \n      /*If random person has already been selected, than get new random person*/\n      while (usedPersons.indexOf(randomPerson) >= 0) {\n          randomNumber = Math.floor(Math.random() * arr.length);\n          randomPerson = arr[randomNumber];\n      }\n      \n      /*Push random person to usedPersons array*/\n      usedPersons.push(randomPerson);\n\n      return [randomPerson, usedPersons];\n  }\n  \n  \n\n\n\n  const onSubmit = (e) => {\n     /*Create array of values and split by newline character*/\n     const arr = e.replace(/,/g, '').split(/\\n/);\n\n    /*Get random person and used persons*/\n    const [person, usedPersons] = randomPersonGenerator(arr);\n\n    /*Set randomPerson in state*/\n    setRandomPerson(person);\n\n    /*Set userPeople array*/\n    setUsedPeople(usedPersons)\n\n  }\n\n  return (\n    <div>\n      <Header/>\n      <Main onChange={onChange} inputValue={inputValue} onSubmit={onSubmit} randomPerson={randomPerson}/>\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}